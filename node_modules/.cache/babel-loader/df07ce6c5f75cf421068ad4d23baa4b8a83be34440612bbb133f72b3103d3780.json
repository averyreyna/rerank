{"ast":null,"code":"import React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TopicClusters=_ref=>{let{clusters}=_ref;if(clusters.length===0)return null;return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-4 rounded-lg border border-grey-200\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-sm font-semibold text-grey-800 mb-3\",children:\"Topic Clusters\"}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-3\",children:clusters.map((cluster,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"relative\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-start space-x-3\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-4 h-4 rounded-full flex-shrink-0 mt-1\",style:{backgroundColor:cluster.color}}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1 min-w-0\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-wrap gap-1 mb-2\",children:cluster.keywords.map((keyword,keyIndex)=>/*#__PURE__*/_jsx(\"span\",{className:\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\",style:{backgroundColor:cluster.color+'20',color:cluster.color},children:keyword},keyIndex))}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-1\",children:[cluster.sentences.slice(0,3).map((sentence,sentIndex)=>/*#__PURE__*/_jsx(\"p\",{className:\"text-xs text-grey-600 leading-relaxed\",children:sentence},sentIndex)),cluster.sentences.length>3&&/*#__PURE__*/_jsxs(\"p\",{className:\"text-xs text-grey-500 italic\",children:[\"+\",cluster.sentences.length-3,\" more sentences...\"]})]})]})]})},cluster.id))}),/*#__PURE__*/_jsx(\"p\",{className:\"text-xs text-grey-500 mt-3\",children:\"Topics are automatically identified based on keyword co-occurrence\"})]});};export default TopicClusters;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","TopicClusters","_ref","clusters","length","className","children","map","cluster","index","style","backgroundColor","color","keywords","keyword","keyIndex","sentences","slice","sentence","sentIndex","id"],"sources":["/Users/averyreyna/Codebases/rerank/src/components/TopicClusters.tsx"],"sourcesContent":["import React from 'react';\nimport { TopicCluster } from '../utils/textSummarization';\n\ninterface TopicClustersProps {\n  clusters: TopicCluster[];\n}\n\nconst TopicClusters: React.FC<TopicClustersProps> = ({ clusters }) => {\n  if (clusters.length === 0) return null;\n\n  return (\n    <div className=\"bg-white p-4 rounded-lg border border-grey-200\">\n      <h4 className=\"text-sm font-semibold text-grey-800 mb-3\">Topic Clusters</h4>\n      <div className=\"space-y-3\">\n        {clusters.map((cluster, index) => (\n          <div key={cluster.id} className=\"relative\">\n            <div className=\"flex items-start space-x-3\">\n              <div \n                className=\"w-4 h-4 rounded-full flex-shrink-0 mt-1\"\n                style={{ backgroundColor: cluster.color }}\n              ></div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex flex-wrap gap-1 mb-2\">\n                  {cluster.keywords.map((keyword, keyIndex) => (\n                    <span \n                      key={keyIndex}\n                      className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\"\n                      style={{ \n                        backgroundColor: cluster.color + '20',\n                        color: cluster.color \n                      }}\n                    >\n                      {keyword}\n                    </span>\n                  ))}\n                </div>\n                <div className=\"space-y-1\">\n                  {cluster.sentences.slice(0, 3).map((sentence, sentIndex) => (\n                    <p \n                      key={sentIndex}\n                      className=\"text-xs text-grey-600 leading-relaxed\"\n                    >\n                      {sentence}\n                    </p>\n                  ))}\n                  {cluster.sentences.length > 3 && (\n                    <p className=\"text-xs text-grey-500 italic\">\n                      +{cluster.sentences.length - 3} more sentences...\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      <p className=\"text-xs text-grey-500 mt-3\">\n        Topics are automatically identified based on keyword co-occurrence\n      </p>\n    </div>\n  );\n};\n\nexport default TopicClusters;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAO1B,KAAM,CAAAC,aAA2C,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC/D,GAAIC,QAAQ,CAACC,MAAM,GAAK,CAAC,CAAE,MAAO,KAAI,CAEtC,mBACEJ,KAAA,QAAKK,SAAS,CAAC,gDAAgD,CAAAC,QAAA,eAC7DR,IAAA,OAAIO,SAAS,CAAC,0CAA0C,CAAAC,QAAA,CAAC,gBAAc,CAAI,CAAC,cAC5ER,IAAA,QAAKO,SAAS,CAAC,WAAW,CAAAC,QAAA,CACvBH,QAAQ,CAACI,GAAG,CAAC,CAACC,OAAO,CAAEC,KAAK,gBAC3BX,IAAA,QAAsBO,SAAS,CAAC,UAAU,CAAAC,QAAA,cACxCN,KAAA,QAAKK,SAAS,CAAC,4BAA4B,CAAAC,QAAA,eACzCR,IAAA,QACEO,SAAS,CAAC,yCAAyC,CACnDK,KAAK,CAAE,CAAEC,eAAe,CAAEH,OAAO,CAACI,KAAM,CAAE,CACtC,CAAC,cACPZ,KAAA,QAAKK,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BR,IAAA,QAAKO,SAAS,CAAC,2BAA2B,CAAAC,QAAA,CACvCE,OAAO,CAACK,QAAQ,CAACN,GAAG,CAAC,CAACO,OAAO,CAAEC,QAAQ,gBACtCjB,IAAA,SAEEO,SAAS,CAAC,qEAAqE,CAC/EK,KAAK,CAAE,CACLC,eAAe,CAAEH,OAAO,CAACI,KAAK,CAAG,IAAI,CACrCA,KAAK,CAAEJ,OAAO,CAACI,KACjB,CAAE,CAAAN,QAAA,CAEDQ,OAAO,EAPHC,QAQD,CACP,CAAC,CACC,CAAC,cACNf,KAAA,QAAKK,SAAS,CAAC,WAAW,CAAAC,QAAA,EACvBE,OAAO,CAACQ,SAAS,CAACC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAACV,GAAG,CAAC,CAACW,QAAQ,CAAEC,SAAS,gBACrDrB,IAAA,MAEEO,SAAS,CAAC,uCAAuC,CAAAC,QAAA,CAEhDY,QAAQ,EAHJC,SAIJ,CACJ,CAAC,CACDX,OAAO,CAACQ,SAAS,CAACZ,MAAM,CAAG,CAAC,eAC3BJ,KAAA,MAAGK,SAAS,CAAC,8BAA8B,CAAAC,QAAA,EAAC,GACzC,CAACE,OAAO,CAACQ,SAAS,CAACZ,MAAM,CAAG,CAAC,CAAC,oBACjC,EAAG,CACJ,EACE,CAAC,EACH,CAAC,EACH,CAAC,EArCEI,OAAO,CAACY,EAsCb,CACN,CAAC,CACC,CAAC,cACNtB,IAAA,MAAGO,SAAS,CAAC,4BAA4B,CAAAC,QAAA,CAAC,oEAE1C,CAAG,CAAC,EACD,CAAC,CAEV,CAAC,CAED,cAAe,CAAAL,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}