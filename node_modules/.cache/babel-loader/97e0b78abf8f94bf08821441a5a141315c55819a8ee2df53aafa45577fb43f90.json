{"ast":null,"code":"import React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DatasetAnalytics=_ref=>{let{results,originalText,filename}=_ref;const estimateSyllables=word=>{// Simple syllable estimation\nword=word.toLowerCase();if(word.length<=3)return 1;word=word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/,'');word=word.replace(/^y/,'');const matches=word.match(/[aeiouy]{1,2}/g);return matches?matches.length:1;};const calculateMetrics=()=>{// Basic text analysis\nconst words=originalText.toLowerCase().match(/\\b\\w+\\b/g)||[];const sentences=originalText.split(/[.!?]+/).filter(s=>s.trim().length>0);const vocabulary=new Set(words);// Word frequency analysis\nconst wordFreq={};words.forEach(word=>{if(word.length>3){// Filter short words\nwordFreq[word]=(wordFreq[word]||0)+1;}});const topWords=Object.entries(wordFreq).sort((_ref2,_ref3)=>{let[,a]=_ref2;let[,b]=_ref3;return b-a;}).slice(0,10).map(_ref4=>{let[word,count]=_ref4;return{word,count};});// Simple readability score (Flesch Reading Ease approximation)\nconst avgSentenceLength=words.length/sentences.length;const avgSyllables=words.reduce((sum,word)=>sum+estimateSyllables(word),0)/words.length;const readabilityScore=Math.max(0,Math.min(100,206.835-1.015*avgSentenceLength-84.6*avgSyllables));// Sentiment distribution from results\nlet sentimentDistribution={positive:0,negative:0,neutral:0};if(results.length>0){results.forEach(result=>{const sentiment=result.qualityMetrics.sentiment;if(sentiment.comparative>0.1)sentimentDistribution.positive++;else if(sentiment.comparative<-0.1)sentimentDistribution.negative++;else sentimentDistribution.neutral++;});}// Quality metrics comparison\nconst qualityMetricsComparison=results.map(result=>({method:result.method,coverage:result.qualityMetrics.coverage,coherence:result.qualityMetrics.coherence,diversity:result.qualityMetrics.diversity,confidence:result.qualityMetrics.confidence}));return{documentCount:1,// Single document for now\ntotalWords:words.length,totalSentences:sentences.length,avgWordsPerSentence:Math.round(words.length/sentences.length*10)/10,vocabularySize:vocabulary.size,topWords,readabilityScore:Math.round(readabilityScore),sentimentDistribution,qualityMetricsComparison};};const metrics=calculateMetrics();if(!originalText||results.length===0){return null;}return/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8 bg-white rounded-lg border border-grey-200 p-6\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-bold text-black mb-6\",children:\"Dataset Analytics\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-center p-4 bg-blue-50 rounded-lg\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-blue-600\",children:metrics.totalWords.toLocaleString()}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-blue-700\",children:\"Total Words\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center p-4 bg-green-50 rounded-lg\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-green-600\",children:metrics.totalSentences}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-green-700\",children:\"Total Sentences\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center p-4 bg-purple-50 rounded-lg\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-purple-600\",children:metrics.vocabularySize.toLocaleString()}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-purple-700\",children:\"Unique Words\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center p-4 bg-orange-50 rounded-lg\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-orange-600\",children:metrics.avgWordsPerSentence}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-orange-700\",children:\"Avg Words/Sentence\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-2 gap-8\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold text-black mb-4\",children:\"Top Keywords\"}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-2\",children:metrics.topWords.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center p-2 bg-grey-50 rounded\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"font-medium text-grey-800\",children:[\"#\",index+1,\" \",item.word]}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-grey-600\",children:[item.count,\" occurrences\"]})]},item.word))})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold text-black mb-4\",children:\"Document Characteristics\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center p-3 bg-grey-50 rounded\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-grey-700\",children:\"Readability Score\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-right\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"font-semibold text-grey-900\",children:[metrics.readabilityScore,\"/100\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xs text-grey-500\",children:metrics.readabilityScore>=60?'Easy':metrics.readabilityScore>=30?'Moderate':'Difficult'})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"p-3 bg-grey-50 rounded\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-grey-700 mb-2\",children:\"Vocabulary Richness\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full bg-grey-200 rounded-full h-2\",children:/*#__PURE__*/_jsx(\"div\",{className:\"bg-purple-600 h-2 rounded-full\",style:{width:`${Math.min(100,metrics.vocabularySize/metrics.totalWords*200)}%`}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs text-grey-500 mt-1\",children:[(metrics.vocabularySize/metrics.totalWords*100).toFixed(1),\"% unique words\"]})]})]})]})]}),metrics.qualityMetricsComparison.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold text-black mb-4\",children:\"Summarization Quality Comparison\"}),/*#__PURE__*/_jsx(\"div\",{className:\"overflow-x-auto\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"w-full text-sm\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{className:\"bg-grey-50\",children:[/*#__PURE__*/_jsx(\"th\",{className:\"text-left p-3 font-semibold text-grey-700\",children:\"Method\"}),/*#__PURE__*/_jsx(\"th\",{className:\"text-center p-3 font-semibold text-grey-700\",children:\"Coverage\"}),/*#__PURE__*/_jsx(\"th\",{className:\"text-center p-3 font-semibold text-grey-700\",children:\"Coherence\"}),/*#__PURE__*/_jsx(\"th\",{className:\"text-center p-3 font-semibold text-grey-700\",children:\"Diversity\"}),/*#__PURE__*/_jsx(\"th\",{className:\"text-center p-3 font-semibold text-grey-700\",children:\"Confidence\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:metrics.qualityMetricsComparison.map((metric,index)=>/*#__PURE__*/_jsxs(\"tr\",{className:index%2===0?'bg-white':'bg-grey-25',children:[/*#__PURE__*/_jsx(\"td\",{className:\"p-3 font-medium text-grey-900\",children:metric.method}),/*#__PURE__*/_jsx(\"td\",{className:\"p-3 text-center\",children:/*#__PURE__*/_jsxs(\"span\",{className:`px-2 py-1 rounded text-xs font-medium ${metric.coverage>=0.7?'bg-green-100 text-green-800':metric.coverage>=0.5?'bg-yellow-100 text-yellow-800':'bg-red-100 text-red-800'}`,children:[(metric.coverage*100).toFixed(0),\"%\"]})}),/*#__PURE__*/_jsx(\"td\",{className:\"p-3 text-center\",children:/*#__PURE__*/_jsxs(\"span\",{className:`px-2 py-1 rounded text-xs font-medium ${metric.coherence>=0.7?'bg-green-100 text-green-800':metric.coherence>=0.5?'bg-yellow-100 text-yellow-800':'bg-red-100 text-red-800'}`,children:[(metric.coherence*100).toFixed(0),\"%\"]})}),/*#__PURE__*/_jsx(\"td\",{className:\"p-3 text-center\",children:/*#__PURE__*/_jsxs(\"span\",{className:`px-2 py-1 rounded text-xs font-medium ${metric.diversity>=0.7?'bg-green-100 text-green-800':metric.diversity>=0.5?'bg-yellow-100 text-yellow-800':'bg-red-100 text-red-800'}`,children:[(metric.diversity*100).toFixed(0),\"%\"]})}),/*#__PURE__*/_jsx(\"td\",{className:\"p-3 text-center\",children:/*#__PURE__*/_jsxs(\"span\",{className:`px-2 py-1 rounded text-xs font-medium ${metric.confidence>=0.7?'bg-green-100 text-green-800':metric.confidence>=0.5?'bg-yellow-100 text-yellow-800':'bg-red-100 text-red-800'}`,children:[(metric.confidence*100).toFixed(0),\"%\"]})})]},metric.method))})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 text-xs text-grey-500\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Coverage:\"}),\" Ratio of important concepts captured \\u2022\",/*#__PURE__*/_jsx(\"strong\",{children:\" Coherence:\"}),\" Flow between sentences \\u2022\",/*#__PURE__*/_jsx(\"strong\",{children:\" Diversity:\"}),\" Vocabulary richness \\u2022\",/*#__PURE__*/_jsx(\"strong\",{children:\" Confidence:\"}),\" Overall quality score\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8 pt-6 border-t border-grey-200\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold text-black mb-4\",children:\"Document Information\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-grey-600\",children:\"Filename:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"text-grey-900 font-medium\",children:filename||'Untitled'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-grey-600\",children:\"Processing Methods:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-grey-900 font-medium\",children:[results.length,\" methods\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-grey-600\",children:\"Avg Processing Time:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-grey-900 font-medium\",children:[results.length>0?Math.round(results.reduce((sum,r)=>sum+r.processingTime,0)/results.length):0,\"ms\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-grey-600\",children:\"Text Complexity:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"text-grey-900 font-medium\",children:metrics.readabilityScore>=60?'Low':metrics.readabilityScore>=30?'Medium':'High'})]})]})]})]});};export default DatasetAnalytics;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","DatasetAnalytics","_ref","results","originalText","filename","estimateSyllables","word","toLowerCase","length","replace","matches","match","calculateMetrics","words","sentences","split","filter","s","trim","vocabulary","Set","wordFreq","forEach","topWords","Object","entries","sort","_ref2","_ref3","a","b","slice","map","_ref4","count","avgSentenceLength","avgSyllables","reduce","sum","readabilityScore","Math","max","min","sentimentDistribution","positive","negative","neutral","result","sentiment","qualityMetrics","comparative","qualityMetricsComparison","method","coverage","coherence","diversity","confidence","documentCount","totalWords","totalSentences","avgWordsPerSentence","round","vocabularySize","size","metrics","className","children","toLocaleString","item","index","style","width","toFixed","metric","r","processingTime"],"sources":["/Users/averyreyna/Codebases/rerank/src/components/DatasetAnalytics.tsx"],"sourcesContent":["import React from 'react';\nimport { SummaryResult } from '../utils/textSummarization';\n\ninterface DatasetAnalyticsProps {\n  results: SummaryResult[];\n  originalText: string;\n  filename: string;\n}\n\ninterface DatasetMetrics {\n  documentCount: number;\n  totalWords: number;\n  totalSentences: number;\n  avgWordsPerSentence: number;\n  vocabularySize: number;\n  topWords: { word: string; count: number }[];\n  readabilityScore: number;\n  sentimentDistribution: {\n    positive: number;\n    negative: number;\n    neutral: number;\n  };\n  qualityMetricsComparison: {\n    method: string;\n    coverage: number;\n    coherence: number;\n    diversity: number;\n    confidence: number;\n  }[];\n}\n\nconst DatasetAnalytics: React.FC<DatasetAnalyticsProps> = ({ \n  results, \n  originalText, \n  filename \n}) => {\n  const estimateSyllables = (word: string): number => {\n    // Simple syllable estimation\n    word = word.toLowerCase();\n    if (word.length <= 3) return 1;\n    word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, '');\n    word = word.replace(/^y/, '');\n    const matches = word.match(/[aeiouy]{1,2}/g);\n    return matches ? matches.length : 1;\n  };\n\n  const calculateMetrics = (): DatasetMetrics => {\n    // Basic text analysis\n    const words = originalText.toLowerCase().match(/\\b\\w+\\b/g) || [];\n    const sentences = originalText.split(/[.!?]+/).filter(s => s.trim().length > 0);\n    const vocabulary = new Set(words);\n    \n    // Word frequency analysis\n    const wordFreq: { [key: string]: number } = {};\n    words.forEach(word => {\n      if (word.length > 3) { // Filter short words\n        wordFreq[word] = (wordFreq[word] || 0) + 1;\n      }\n    });\n    \n    const topWords = Object.entries(wordFreq)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 10)\n      .map(([word, count]) => ({ word, count }));\n\n    // Simple readability score (Flesch Reading Ease approximation)\n    const avgSentenceLength = words.length / sentences.length;\n    const avgSyllables = words.reduce((sum: number, word: string) => sum + estimateSyllables(word), 0) / words.length;\n    const readabilityScore = Math.max(0, Math.min(100, \n      206.835 - (1.015 * avgSentenceLength) - (84.6 * avgSyllables)\n    ));\n\n    // Sentiment distribution from results\n    let sentimentDistribution = { positive: 0, negative: 0, neutral: 0 };\n    if (results.length > 0) {\n      results.forEach(result => {\n        const sentiment = result.qualityMetrics.sentiment;\n        if (sentiment.comparative > 0.1) sentimentDistribution.positive++;\n        else if (sentiment.comparative < -0.1) sentimentDistribution.negative++;\n        else sentimentDistribution.neutral++;\n      });\n    }\n\n    // Quality metrics comparison\n    const qualityMetricsComparison = results.map(result => ({\n      method: result.method,\n      coverage: result.qualityMetrics.coverage,\n      coherence: result.qualityMetrics.coherence,\n      diversity: result.qualityMetrics.diversity,\n      confidence: result.qualityMetrics.confidence\n    }));\n\n    return {\n      documentCount: 1, // Single document for now\n      totalWords: words.length,\n      totalSentences: sentences.length,\n      avgWordsPerSentence: Math.round(words.length / sentences.length * 10) / 10,\n      vocabularySize: vocabulary.size,\n      topWords,\n      readabilityScore: Math.round(readabilityScore),\n      sentimentDistribution,\n      qualityMetricsComparison\n    };\n  };\n\n  const metrics = calculateMetrics();\n\n  if (!originalText || results.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"mt-8 bg-white rounded-lg border border-grey-200 p-6\">\n      <h2 className=\"text-xl font-bold text-black mb-6\">Dataset Analytics</h2>\n      \n      {/* Document Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n        <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n          <div className=\"text-2xl font-bold text-blue-600\">{metrics.totalWords.toLocaleString()}</div>\n          <div className=\"text-sm text-blue-700\">Total Words</div>\n        </div>\n        <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n          <div className=\"text-2xl font-bold text-green-600\">{metrics.totalSentences}</div>\n          <div className=\"text-sm text-green-700\">Total Sentences</div>\n        </div>\n        <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n          <div className=\"text-2xl font-bold text-purple-600\">{metrics.vocabularySize.toLocaleString()}</div>\n          <div className=\"text-sm text-purple-700\">Unique Words</div>\n        </div>\n        <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n          <div className=\"text-2xl font-bold text-orange-600\">{metrics.avgWordsPerSentence}</div>\n          <div className=\"text-sm text-orange-700\">Avg Words/Sentence</div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Vocabulary Analysis */}\n        <div>\n          <h3 className=\"text-lg font-semibold text-black mb-4\">Top Keywords</h3>\n          <div className=\"space-y-2\">\n            {metrics.topWords.map((item, index) => (\n              <div key={item.word} className=\"flex justify-between items-center p-2 bg-grey-50 rounded\">\n                <span className=\"font-medium text-grey-800\">#{index + 1} {item.word}</span>\n                <span className=\"text-grey-600\">{item.count} occurrences</span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Document Characteristics */}\n        <div>\n          <h3 className=\"text-lg font-semibold text-black mb-4\">Document Characteristics</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center p-3 bg-grey-50 rounded\">\n              <span className=\"text-grey-700\">Readability Score</span>\n              <div className=\"text-right\">\n                <div className=\"font-semibold text-grey-900\">{metrics.readabilityScore}/100</div>\n                <div className=\"text-xs text-grey-500\">\n                  {metrics.readabilityScore >= 60 ? 'Easy' : \n                   metrics.readabilityScore >= 30 ? 'Moderate' : 'Difficult'}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"p-3 bg-grey-50 rounded\">\n              <div className=\"text-grey-700 mb-2\">Vocabulary Richness</div>\n              <div className=\"w-full bg-grey-200 rounded-full h-2\">\n                <div \n                  className=\"bg-purple-600 h-2 rounded-full\" \n                  style={{ width: `${Math.min(100, (metrics.vocabularySize / metrics.totalWords) * 200)}%` }}\n                ></div>\n              </div>\n              <div className=\"text-xs text-grey-500 mt-1\">\n                {((metrics.vocabularySize / metrics.totalWords) * 100).toFixed(1)}% unique words\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quality Metrics Comparison */}\n      {metrics.qualityMetricsComparison.length > 0 && (\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-semibold text-black mb-4\">Summarization Quality Comparison</h3>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead>\n                <tr className=\"bg-grey-50\">\n                  <th className=\"text-left p-3 font-semibold text-grey-700\">Method</th>\n                  <th className=\"text-center p-3 font-semibold text-grey-700\">Coverage</th>\n                  <th className=\"text-center p-3 font-semibold text-grey-700\">Coherence</th>\n                  <th className=\"text-center p-3 font-semibold text-grey-700\">Diversity</th>\n                  <th className=\"text-center p-3 font-semibold text-grey-700\">Confidence</th>\n                </tr>\n              </thead>\n              <tbody>\n                {metrics.qualityMetricsComparison.map((metric, index) => (\n                  <tr key={metric.method} className={index % 2 === 0 ? 'bg-white' : 'bg-grey-25'}>\n                    <td className=\"p-3 font-medium text-grey-900\">{metric.method}</td>\n                    <td className=\"p-3 text-center\">\n                      <span className={`px-2 py-1 rounded text-xs font-medium ${\n                        metric.coverage >= 0.7 ? 'bg-green-100 text-green-800' :\n                        metric.coverage >= 0.5 ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {(metric.coverage * 100).toFixed(0)}%\n                      </span>\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      <span className={`px-2 py-1 rounded text-xs font-medium ${\n                        metric.coherence >= 0.7 ? 'bg-green-100 text-green-800' :\n                        metric.coherence >= 0.5 ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {(metric.coherence * 100).toFixed(0)}%\n                      </span>\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      <span className={`px-2 py-1 rounded text-xs font-medium ${\n                        metric.diversity >= 0.7 ? 'bg-green-100 text-green-800' :\n                        metric.diversity >= 0.5 ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {(metric.diversity * 100).toFixed(0)}%\n                      </span>\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      <span className={`px-2 py-1 rounded text-xs font-medium ${\n                        metric.confidence >= 0.7 ? 'bg-green-100 text-green-800' :\n                        metric.confidence >= 0.5 ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {(metric.confidence * 100).toFixed(0)}%\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <div className=\"mt-4 text-xs text-grey-500\">\n            <strong>Coverage:</strong> Ratio of important concepts captured • \n            <strong> Coherence:</strong> Flow between sentences • \n            <strong> Diversity:</strong> Vocabulary richness • \n            <strong> Confidence:</strong> Overall quality score\n          </div>\n        </div>\n      )}\n\n      {/* Document Metadata */}\n      <div className=\"mt-8 pt-6 border-t border-grey-200\">\n        <h3 className=\"text-lg font-semibold text-black mb-4\">Document Information</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-grey-600\">Filename:</span>\n            <span className=\"text-grey-900 font-medium\">{filename || 'Untitled'}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-grey-600\">Processing Methods:</span>\n            <span className=\"text-grey-900 font-medium\">{results.length} methods</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-grey-600\">Avg Processing Time:</span>\n            <span className=\"text-grey-900 font-medium\">\n              {results.length > 0 ? \n                Math.round(results.reduce((sum, r) => sum + r.processingTime, 0) / results.length) : 0}ms\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-grey-600\">Text Complexity:</span>\n            <span className=\"text-grey-900 font-medium\">\n              {metrics.readabilityScore >= 60 ? 'Low' : \n               metrics.readabilityScore >= 30 ? 'Medium' : 'High'}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DatasetAnalytics;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}