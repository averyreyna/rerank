{"ast":null,"code":"import React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const QualityAssessment=_ref=>{var _qualityIndicators$me,_qualityIndicators$me2;let{results,originalText}=_ref;// Calculate cosine similarity between two texts\nconst calculateSimilarity=(text1,text2)=>{const words1=text1.toLowerCase().split(/\\s+/);const words2=text2.toLowerCase().split(/\\s+/);const allWords=Array.from(new Set([...words1,...words2]));const vector1=allWords.map(word=>words1.filter(w=>w===word).length);const vector2=allWords.map(word=>words2.filter(w=>w===word).length);const dotProduct=vector1.reduce((sum,val,i)=>sum+val*vector2[i],0);const magnitude1=Math.sqrt(vector1.reduce((sum,val)=>sum+val*val,0));const magnitude2=Math.sqrt(vector2.reduce((sum,val)=>sum+val*val,0));return magnitude1&&magnitude2?dotProduct/(magnitude1*magnitude2):0;};// Calculate Jaccard similarity for sentence overlap\nconst calculateJaccardSimilarity=(sentences1,sentences2)=>{const set1=new Set(sentences1.map(s=>s.toLowerCase().trim()));const set2=new Set(sentences2.map(s=>s.toLowerCase().trim()));const intersection=new Set([...set1].filter(x=>set2.has(x)));const union=new Set([...set1,...set2]);return union.size>0?intersection.size/union.size:0;};// Analyze inter-method agreement\nconst analyzeAgreement=()=>{if(results.length<2){return{overallAgreement:0,pairwiseAgreements:[],consensusStrength:0,disagreementAreas:['Insufficient methods for comparison']};}const pairwiseAgreements=[];let totalSimilarity=0;let comparisons=0;// Calculate pairwise similarities\nfor(let i=0;i<results.length;i++){for(let j=i+1;j<results.length;j++){const textSimilarity=calculateSimilarity(results[i].summary,results[j].summary);const sentenceSimilarity=calculateJaccardSimilarity(results[i].sentences,results[j].sentences);const avgSimilarity=(textSimilarity+sentenceSimilarity)/2;pairwiseAgreements.push({methods:[results[i].method,results[j].method],similarity:Math.round(avgSimilarity*100)/100,confidence:avgSimilarity>0.7?'high':avgSimilarity>0.4?'medium':'low'});totalSimilarity+=avgSimilarity;comparisons++;}}const overallAgreement=comparisons>0?totalSimilarity/comparisons:0;// Identify disagreement areas\nconst disagreementAreas=[];const lowAgreements=pairwiseAgreements.filter(p=>p.confidence==='low');if(lowAgreements.length>0){disagreementAreas.push(`Low agreement between ${lowAgreements.map(p=>p.methods.join(' vs ')).join(', ')}`);}if(overallAgreement<0.3){disagreementAreas.push('Methods produce significantly different summaries');}// Calculate consensus strength\nconst highAgreements=pairwiseAgreements.filter(p=>p.confidence==='high').length;const consensusStrength=comparisons>0?highAgreements/comparisons:0;return{overallAgreement:Math.round(overallAgreement*100)/100,pairwiseAgreements,consensusStrength:Math.round(consensusStrength*100)/100,disagreementAreas:disagreementAreas.length>0?disagreementAreas:['No significant disagreements detected']};};// Analyze quality indicators\nconst analyzeQualityIndicators=()=>{const methodConfidence=results.map(result=>{const issues=[];let confidence=result.qualityMetrics.confidence;// Adjust confidence based on various factors\nif(result.qualityMetrics.coverage<0.5){issues.push('Low content coverage');confidence*=0.8;}if(result.qualityMetrics.coherence<0.4){issues.push('Poor sentence coherence');confidence*=0.9;}if(result.qualityMetrics.diversity<0.3){issues.push('Limited vocabulary diversity');confidence*=0.95;}if(result.processingTime>5000){issues.push('Unusually long processing time');}// Special considerations for different methods\nif(result.method==='BART'&&result.summary.length<50){issues.push('Unusually short BART summary');confidence*=0.9;}if(result.method.includes('Fallback')){issues.push('API fallback mode used');confidence*=0.7;}return{method:result.method,confidence:Math.round(confidence*100)/100,reliability:confidence>0.7?'high':confidence>0.5?'medium':'low',issues:issues.length>0?issues:['No issues detected']};});// Calculate consistency score\nconst confidenceValues=methodConfidence.map(m=>m.confidence);const avgConfidence=confidenceValues.reduce((sum,val)=>sum+val,0)/confidenceValues.length;const variance=confidenceValues.reduce((sum,val)=>sum+Math.pow(val-avgConfidence,2),0)/confidenceValues.length;const consistencyScore=Math.max(0,1-variance);// Detect outliers\nconst outlierDetection=methodConfidence.map(method=>{const deviation=Math.abs(method.confidence-avgConfidence);return{method:method.method,isOutlier:deviation>0.2,deviation:Math.round(deviation*100)/100};});return{methodConfidence,consistencyScore:Math.round(consistencyScore*100)/100,outlierDetection};};const agreementAnalysis=analyzeAgreement();const qualityIndicators=analyzeQualityIndicators();if(results.length===0){return null;}return/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8 bg-white rounded-lg border border-grey-200 p-6\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-bold text-black mb-6\",children:\"Quality Assessment Tools\"}),/*#__PURE__*/_jsx(\"div\",{className:\"mb-8 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 md:grid-cols-3 gap-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-2xl font-bold text-blue-600\",children:[Math.round((agreementAnalysis.overallAgreement+qualityIndicators.consistencyScore)*50),\"%\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-blue-700\",children:\"Overall Quality\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-2xl font-bold text-purple-600\",children:[Math.round(agreementAnalysis.overallAgreement*100),\"%\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-purple-700\",children:\"Method Agreement\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-2xl font-bold text-green-600\",children:[Math.round(qualityIndicators.consistencyScore*100),\"%\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-green-700\",children:\"Consistency Score\"})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-2 gap-8\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold text-black mb-4\",children:\"Inter-Method Agreement\"}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-3\",children:agreementAnalysis.pairwiseAgreements.map((agreement,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"p-3 bg-grey-50 rounded\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-2\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-medium text-grey-800\",children:agreement.methods.join(' vs ')}),/*#__PURE__*/_jsxs(\"span\",{className:`px-2 py-1 rounded text-xs font-medium ${agreement.confidence==='high'?'bg-green-100 text-green-800':agreement.confidence==='medium'?'bg-yellow-100 text-yellow-800':'bg-red-100 text-red-800'}`,children:[Math.round(agreement.similarity*100),\"% similarity\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full bg-grey-200 rounded-full h-2\",children:/*#__PURE__*/_jsx(\"div\",{className:`h-2 rounded-full ${agreement.confidence==='high'?'bg-green-500':agreement.confidence==='medium'?'bg-yellow-500':'bg-red-500'}`,style:{width:`${agreement.similarity*100}%`}})})]},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 p-3 bg-blue-50 rounded\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"font-semibold text-blue-800 mb-2\",children:\"Consensus Analysis\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-blue-700\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"Consensus Strength: \",Math.round(agreementAnalysis.consensusStrength*100),\"%\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Areas of Disagreement:\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"list-disc list-inside mt-1\",children:agreementAnalysis.disagreementAreas.map((area,index)=>/*#__PURE__*/_jsx(\"li\",{className:\"text-xs\",children:area},index))})]})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold text-black mb-4\",children:\"Method Confidence & Reliability\"}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-3\",children:qualityIndicators.methodConfidence.map((method,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"p-3 bg-grey-50 rounded\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-2\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-medium text-grey-800\",children:method.method}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-2\",children:[/*#__PURE__*/_jsx(\"span\",{className:`px-2 py-1 rounded text-xs font-medium ${method.reliability==='high'?'bg-green-100 text-green-800':method.reliability==='medium'?'bg-yellow-100 text-yellow-800':'bg-red-100 text-red-800'}`,children:method.reliability}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm font-semibold text-grey-700\",children:[Math.round(method.confidence*100),\"%\"]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full bg-grey-200 rounded-full h-2 mb-2\",children:/*#__PURE__*/_jsx(\"div\",{className:`h-2 rounded-full ${method.reliability==='high'?'bg-green-500':method.reliability==='medium'?'bg-yellow-500':'bg-red-500'}`,style:{width:`${method.confidence*100}%`}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs text-grey-600\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Issues:\"}),\" \",method.issues.join(', ')]})]},index))}),qualityIndicators.outlierDetection.some(o=>o.isOutlier)&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 p-3 bg-orange-50 rounded\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"font-semibold text-orange-800 mb-2\",children:\"\\u26A0\\uFE0F Outlier Detection\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-orange-700\",children:qualityIndicators.outlierDetection.filter(o=>o.isOutlier).map((outlier,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs\",children:[/*#__PURE__*/_jsx(\"strong\",{children:outlier.method}),\" shows unusual confidence deviation (\",outlier.deviation*100,\"%)\"]},index))})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8 p-4 bg-green-50 rounded-lg\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold text-green-800 mb-3\",children:\"\\uD83D\\uDCCB Annotation Recommendations\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-green-700 space-y-2\",children:[agreementAnalysis.overallAgreement>0.7?/*#__PURE__*/_jsxs(\"div\",{children:[\"\\u2705 \",/*#__PURE__*/_jsx(\"strong\",{children:\"High Agreement:\"}),\" Methods show strong consensus. Summaries are likely reliable for annotation.\"]}):agreementAnalysis.overallAgreement>0.4?/*#__PURE__*/_jsxs(\"div\",{children:[\"\\u26A0\\uFE0F \",/*#__PURE__*/_jsx(\"strong\",{children:\"Moderate Agreement:\"}),\" Some variation between methods. Consider manual review of summaries.\"]}):/*#__PURE__*/_jsxs(\"div\",{children:[\"\\u274C \",/*#__PURE__*/_jsx(\"strong\",{children:\"Low Agreement:\"}),\" Significant disagreement detected. Manual annotation strongly recommended.\"]}),qualityIndicators.consistencyScore>0.8?/*#__PURE__*/_jsxs(\"div\",{children:[\"\\u2705 \",/*#__PURE__*/_jsx(\"strong\",{children:\"Consistent Quality:\"}),\" All methods performing reliably.\"]}):/*#__PURE__*/_jsxs(\"div\",{children:[\"\\u26A0\\uFE0F \",/*#__PURE__*/_jsx(\"strong\",{children:\"Variable Quality:\"}),\" Some methods may be less reliable for this text type.\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Best Method:\"}),\" \",(_qualityIndicators$me=qualityIndicators.methodConfidence.sort((a,b)=>b.confidence-a.confidence)[0])===null||_qualityIndicators$me===void 0?void 0:_qualityIndicators$me.method,\"(highest confidence: \",Math.round(((_qualityIndicators$me2=qualityIndicators.methodConfidence.sort((a,b)=>b.confidence-a.confidence)[0])===null||_qualityIndicators$me2===void 0?void 0:_qualityIndicators$me2.confidence)*100),\"%)\"]})]})]})]});};export default QualityAssessment;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","QualityAssessment","_ref","_qualityIndicators$me","_qualityIndicators$me2","results","originalText","calculateSimilarity","text1","text2","words1","toLowerCase","split","words2","allWords","Array","from","Set","vector1","map","word","filter","w","length","vector2","dotProduct","reduce","sum","val","i","magnitude1","Math","sqrt","magnitude2","calculateJaccardSimilarity","sentences1","sentences2","set1","s","trim","set2","intersection","x","has","union","size","analyzeAgreement","overallAgreement","pairwiseAgreements","consensusStrength","disagreementAreas","totalSimilarity","comparisons","j","textSimilarity","summary","sentenceSimilarity","sentences","avgSimilarity","push","methods","method","similarity","round","confidence","lowAgreements","p","join","highAgreements","analyzeQualityIndicators","methodConfidence","result","issues","qualityMetrics","coverage","coherence","diversity","processingTime","includes","reliability","confidenceValues","m","avgConfidence","variance","pow","consistencyScore","max","outlierDetection","deviation","abs","isOutlier","agreementAnalysis","qualityIndicators","className","children","agreement","index","style","width","area","some","o","outlier","sort","a","b"],"sources":["/Users/averyreyna/Codebases/rerank/src/components/QualityAssessment.tsx"],"sourcesContent":["import React from 'react';\nimport { SummaryResult } from '../utils/textSummarization';\n\ninterface QualityAssessmentProps {\n  results: SummaryResult[];\n  originalText: string;\n}\n\ninterface AgreementAnalysis {\n  overallAgreement: number;\n  pairwiseAgreements: {\n    methods: string[];\n    similarity: number;\n    confidence: 'high' | 'medium' | 'low';\n  }[];\n  consensusStrength: number;\n  disagreementAreas: string[];\n}\n\ninterface QualityIndicators {\n  methodConfidence: {\n    method: string;\n    confidence: number;\n    reliability: 'high' | 'medium' | 'low';\n    issues: string[];\n  }[];\n  consistencyScore: number;\n  outlierDetection: {\n    method: string;\n    isOutlier: boolean;\n    deviation: number;\n  }[];\n}\n\nconst QualityAssessment: React.FC<QualityAssessmentProps> = ({ \n  results, \n  originalText \n}) => {\n  // Calculate cosine similarity between two texts\n  const calculateSimilarity = (text1: string, text2: string): number => {\n    const words1 = text1.toLowerCase().split(/\\s+/);\n    const words2 = text2.toLowerCase().split(/\\s+/);\n    \n    const allWords = Array.from(new Set([...words1, ...words2]));\n    \n    const vector1 = allWords.map(word => words1.filter(w => w === word).length);\n    const vector2 = allWords.map(word => words2.filter(w => w === word).length);\n    \n    const dotProduct = vector1.reduce((sum, val, i) => sum + val * vector2[i], 0);\n    const magnitude1 = Math.sqrt(vector1.reduce((sum, val) => sum + val * val, 0));\n    const magnitude2 = Math.sqrt(vector2.reduce((sum, val) => sum + val * val, 0));\n    \n    return magnitude1 && magnitude2 ? dotProduct / (magnitude1 * magnitude2) : 0;\n  };\n\n  // Calculate Jaccard similarity for sentence overlap\n  const calculateJaccardSimilarity = (sentences1: string[], sentences2: string[]): number => {\n    const set1 = new Set(sentences1.map(s => s.toLowerCase().trim()));\n    const set2 = new Set(sentences2.map(s => s.toLowerCase().trim()));\n    \n    const intersection = new Set([...set1].filter(x => set2.has(x)));\n    const union = new Set([...set1, ...set2]);\n    \n    return union.size > 0 ? intersection.size / union.size : 0;\n  };\n\n  // Analyze inter-method agreement\n  const analyzeAgreement = (): AgreementAnalysis => {\n    if (results.length < 2) {\n      return {\n        overallAgreement: 0,\n        pairwiseAgreements: [],\n        consensusStrength: 0,\n        disagreementAreas: ['Insufficient methods for comparison']\n      };\n    }\n\n    const pairwiseAgreements = [];\n    let totalSimilarity = 0;\n    let comparisons = 0;\n\n    // Calculate pairwise similarities\n    for (let i = 0; i < results.length; i++) {\n      for (let j = i + 1; j < results.length; j++) {\n        const textSimilarity = calculateSimilarity(results[i].summary, results[j].summary);\n        const sentenceSimilarity = calculateJaccardSimilarity(results[i].sentences, results[j].sentences);\n        const avgSimilarity = (textSimilarity + sentenceSimilarity) / 2;\n        \n        pairwiseAgreements.push({\n          methods: [results[i].method, results[j].method],\n          similarity: Math.round(avgSimilarity * 100) / 100,\n          confidence: avgSimilarity > 0.7 ? 'high' : avgSimilarity > 0.4 ? 'medium' : 'low'\n        });\n        \n        totalSimilarity += avgSimilarity;\n        comparisons++;\n      }\n    }\n\n    const overallAgreement = comparisons > 0 ? totalSimilarity / comparisons : 0;\n    \n    // Identify disagreement areas\n    const disagreementAreas: string[] = [];\n    const lowAgreements = pairwiseAgreements.filter(p => p.confidence === 'low');\n    \n    if (lowAgreements.length > 0) {\n      disagreementAreas.push(`Low agreement between ${lowAgreements.map(p => p.methods.join(' vs ')).join(', ')}`);\n    }\n    \n    if (overallAgreement < 0.3) {\n      disagreementAreas.push('Methods produce significantly different summaries');\n    }\n    \n    // Calculate consensus strength\n    const highAgreements = pairwiseAgreements.filter(p => p.confidence === 'high').length;\n    const consensusStrength = comparisons > 0 ? highAgreements / comparisons : 0;\n\n    return {\n      overallAgreement: Math.round(overallAgreement * 100) / 100,\n      pairwiseAgreements,\n      consensusStrength: Math.round(consensusStrength * 100) / 100,\n      disagreementAreas: disagreementAreas.length > 0 ? disagreementAreas : ['No significant disagreements detected']\n    };\n  };\n\n  // Analyze quality indicators\n  const analyzeQualityIndicators = (): QualityIndicators => {\n    const methodConfidence = results.map(result => {\n      const issues: string[] = [];\n      let confidence = result.qualityMetrics.confidence;\n      \n      // Adjust confidence based on various factors\n      if (result.qualityMetrics.coverage < 0.5) {\n        issues.push('Low content coverage');\n        confidence *= 0.8;\n      }\n      \n      if (result.qualityMetrics.coherence < 0.4) {\n        issues.push('Poor sentence coherence');\n        confidence *= 0.9;\n      }\n      \n      if (result.qualityMetrics.diversity < 0.3) {\n        issues.push('Limited vocabulary diversity');\n        confidence *= 0.95;\n      }\n      \n      if (result.processingTime > 5000) {\n        issues.push('Unusually long processing time');\n      }\n      \n      // Special considerations for different methods\n      if (result.method === 'BART' && result.summary.length < 50) {\n        issues.push('Unusually short BART summary');\n        confidence *= 0.9;\n      }\n      \n      if (result.method.includes('Fallback')) {\n        issues.push('API fallback mode used');\n        confidence *= 0.7;\n      }\n      \n      return {\n        method: result.method,\n        confidence: Math.round(confidence * 100) / 100,\n        reliability: confidence > 0.7 ? 'high' : confidence > 0.5 ? 'medium' : 'low',\n        issues: issues.length > 0 ? issues : ['No issues detected']\n      };\n    });\n\n    // Calculate consistency score\n    const confidenceValues = methodConfidence.map(m => m.confidence);\n    const avgConfidence = confidenceValues.reduce((sum, val) => sum + val, 0) / confidenceValues.length;\n    const variance = confidenceValues.reduce((sum, val) => sum + Math.pow(val - avgConfidence, 2), 0) / confidenceValues.length;\n    const consistencyScore = Math.max(0, 1 - variance);\n\n    // Detect outliers\n    const outlierDetection = methodConfidence.map(method => {\n      const deviation = Math.abs(method.confidence - avgConfidence);\n      return {\n        method: method.method,\n        isOutlier: deviation > 0.2,\n        deviation: Math.round(deviation * 100) / 100\n      };\n    });\n\n    return {\n      methodConfidence,\n      consistencyScore: Math.round(consistencyScore * 100) / 100,\n      outlierDetection\n    };\n  };\n\n  const agreementAnalysis = analyzeAgreement();\n  const qualityIndicators = analyzeQualityIndicators();\n\n  if (results.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"mt-8 bg-white rounded-lg border border-grey-200 p-6\">\n      <h2 className=\"text-xl font-bold text-black mb-6\">Quality Assessment Tools</h2>\n      \n      {/* Overall Quality Score */}\n      <div className=\"mb-8 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {Math.round((agreementAnalysis.overallAgreement + qualityIndicators.consistencyScore) * 50)}%\n            </div>\n            <div className=\"text-sm text-blue-700\">Overall Quality</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {Math.round(agreementAnalysis.overallAgreement * 100)}%\n            </div>\n            <div className=\"text-sm text-purple-700\">Method Agreement</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {Math.round(qualityIndicators.consistencyScore * 100)}%\n            </div>\n            <div className=\"text-sm text-green-700\">Consistency Score</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Inter-Method Agreement */}\n        <div>\n          <h3 className=\"text-lg font-semibold text-black mb-4\">Inter-Method Agreement</h3>\n          <div className=\"space-y-3\">\n            {agreementAnalysis.pairwiseAgreements.map((agreement, index) => (\n              <div key={index} className=\"p-3 bg-grey-50 rounded\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"font-medium text-grey-800\">\n                    {agreement.methods.join(' vs ')}\n                  </span>\n                  <span className={`px-2 py-1 rounded text-xs font-medium ${\n                    agreement.confidence === 'high' ? 'bg-green-100 text-green-800' :\n                    agreement.confidence === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                    'bg-red-100 text-red-800'\n                  }`}>\n                    {Math.round(agreement.similarity * 100)}% similarity\n                  </span>\n                </div>\n                <div className=\"w-full bg-grey-200 rounded-full h-2\">\n                  <div \n                    className={`h-2 rounded-full ${\n                      agreement.confidence === 'high' ? 'bg-green-500' :\n                      agreement.confidence === 'medium' ? 'bg-yellow-500' :\n                      'bg-red-500'\n                    }`}\n                    style={{ width: `${agreement.similarity * 100}%` }}\n                  ></div>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"mt-4 p-3 bg-blue-50 rounded\">\n            <h4 className=\"font-semibold text-blue-800 mb-2\">Consensus Analysis</h4>\n            <div className=\"text-sm text-blue-700\">\n              <div>Consensus Strength: {Math.round(agreementAnalysis.consensusStrength * 100)}%</div>\n              <div className=\"mt-2\">\n                <strong>Areas of Disagreement:</strong>\n                <ul className=\"list-disc list-inside mt-1\">\n                  {agreementAnalysis.disagreementAreas.map((area, index) => (\n                    <li key={index} className=\"text-xs\">{area}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Method Confidence & Reliability */}\n        <div>\n          <h3 className=\"text-lg font-semibold text-black mb-4\">Method Confidence & Reliability</h3>\n          <div className=\"space-y-3\">\n            {qualityIndicators.methodConfidence.map((method, index) => (\n              <div key={index} className=\"p-3 bg-grey-50 rounded\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"font-medium text-grey-800\">{method.method}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`px-2 py-1 rounded text-xs font-medium ${\n                      method.reliability === 'high' ? 'bg-green-100 text-green-800' :\n                      method.reliability === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-red-100 text-red-800'\n                    }`}>\n                      {method.reliability}\n                    </span>\n                    <span className=\"text-sm font-semibold text-grey-700\">\n                      {Math.round(method.confidence * 100)}%\n                    </span>\n                  </div>\n                </div>\n                <div className=\"w-full bg-grey-200 rounded-full h-2 mb-2\">\n                  <div \n                    className={`h-2 rounded-full ${\n                      method.reliability === 'high' ? 'bg-green-500' :\n                      method.reliability === 'medium' ? 'bg-yellow-500' :\n                      'bg-red-500'\n                    }`}\n                    style={{ width: `${method.confidence * 100}%` }}\n                  ></div>\n                </div>\n                <div className=\"text-xs text-grey-600\">\n                  <strong>Issues:</strong> {method.issues.join(', ')}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Outlier Detection */}\n          {qualityIndicators.outlierDetection.some(o => o.isOutlier) && (\n            <div className=\"mt-4 p-3 bg-orange-50 rounded\">\n              <h4 className=\"font-semibold text-orange-800 mb-2\">⚠️ Outlier Detection</h4>\n              <div className=\"text-sm text-orange-700\">\n                {qualityIndicators.outlierDetection\n                  .filter(o => o.isOutlier)\n                  .map((outlier, index) => (\n                    <div key={index} className=\"text-xs\">\n                      <strong>{outlier.method}</strong> shows unusual confidence deviation ({outlier.deviation * 100}%)\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Recommendations */}\n      <div className=\"mt-8 p-4 bg-green-50 rounded-lg\">\n        <h3 className=\"text-lg font-semibold text-green-800 mb-3\">📋 Annotation Recommendations</h3>\n        <div className=\"text-sm text-green-700 space-y-2\">\n          {agreementAnalysis.overallAgreement > 0.7 ? (\n            <div>✅ <strong>High Agreement:</strong> Methods show strong consensus. Summaries are likely reliable for annotation.</div>\n          ) : agreementAnalysis.overallAgreement > 0.4 ? (\n            <div>⚠️ <strong>Moderate Agreement:</strong> Some variation between methods. Consider manual review of summaries.</div>\n          ) : (\n            <div>❌ <strong>Low Agreement:</strong> Significant disagreement detected. Manual annotation strongly recommended.</div>\n          )}\n          \n          {qualityIndicators.consistencyScore > 0.8 ? (\n            <div>✅ <strong>Consistent Quality:</strong> All methods performing reliably.</div>\n          ) : (\n            <div>⚠️ <strong>Variable Quality:</strong> Some methods may be less reliable for this text type.</div>\n          )}\n          \n          <div>\n            <strong>Best Method:</strong> {qualityIndicators.methodConfidence\n              .sort((a, b) => b.confidence - a.confidence)[0]?.method} \n            (highest confidence: {Math.round(qualityIndicators.methodConfidence\n              .sort((a, b) => b.confidence - a.confidence)[0]?.confidence * 100)}%)\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QualityAssessment;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}