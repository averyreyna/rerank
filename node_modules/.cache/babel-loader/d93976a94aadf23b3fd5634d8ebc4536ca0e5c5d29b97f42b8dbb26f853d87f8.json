{"ast":null,"code":"import Sentiment from'sentiment';// Simple sentence tokenizer\nfunction tokenizeSentences(text){return text.split(/[.!?]+/).map(s=>s.trim()).filter(s=>s.length>10);}// Calculate cosine similarity between two sentences\nfunction cosineSimilarity(sent1,sent2){const words1=sent1.toLowerCase().split(/\\s+/);const words2=sent2.toLowerCase().split(/\\s+/);const allWords=Array.from(new Set([...words1,...words2]));const vector1=allWords.map(word=>words1.filter(w=>w===word).length);const vector2=allWords.map(word=>words2.filter(w=>w===word).length);const dotProduct=vector1.reduce((sum,val,i)=>sum+val*vector2[i],0);const magnitude1=Math.sqrt(vector1.reduce((sum,val)=>sum+val*val,0));const magnitude2=Math.sqrt(vector2.reduce((sum,val)=>sum+val*val,0));return magnitude1&&magnitude2?dotProduct/(magnitude1*magnitude2):0;}// Initialize sentiment analyzer\nconst sentiment=new Sentiment();// Calculate quality metrics for a summary\nfunction calculateQualityMetrics(originalText,summaryText,selectedSentences,allSentences){// Coverage: ratio of unique words in summary vs original\nconst originalWords=new Set(originalText.toLowerCase().match(/\\b\\w+\\b/g)||[]);const summaryWords=new Set(summaryText.toLowerCase().match(/\\b\\w+\\b/g)||[]);const coverage=summaryWords.size/originalWords.size;// Coherence: average similarity between consecutive sentences in summary\nlet coherenceSum=0;for(let i=0;i<selectedSentences.length-1;i++){coherenceSum+=cosineSimilarity(selectedSentences[i],selectedSentences[i+1]);}const coherence=selectedSentences.length>1?coherenceSum/(selectedSentences.length-1):1;// Diversity: ratio of unique words to total words in summary\nconst totalSummaryWords=summaryText.toLowerCase().match(/\\b\\w+\\b/g)||[];const diversity=summaryWords.size/totalSummaryWords.length;// Confidence: weighted combination of metrics\nconst confidence=coverage*0.4+coherence*0.3+diversity*0.3;// Sentiment analysis\nconst sentimentResult=sentiment.analyze(summaryText);return{coverage:Math.round(coverage*100)/100,coherence:Math.round(coherence*100)/100,diversity:Math.round(diversity*100)/100,confidence:Math.round(confidence*100)/100,sentiment:{score:sentimentResult.score,comparative:Math.round(sentimentResult.comparative*100)/100,positive:sentimentResult.positive,negative:sentimentResult.negative}};}// Generate visualization data\nfunction generateVisualizationData(sentences,scores,similarityMatrix){// Limit visualization to top 25 sentences to improve performance\nconst MAX_NODES=25;// Get indices of top scoring sentences\nconst rankedIndices=sentences.map((_,index)=>({index,score:scores[index]||0})).sort((a,b)=>b.score-a.score).slice(0,Math.min(MAX_NODES,sentences.length)).map(item=>item.index);// Create sentence nodes for graph visualization (only for top sentences)\nconst sentenceGraph=rankedIndices.map(originalIndex=>{const sentence=sentences[originalIndex];const sentimentScore=sentiment.analyze(sentence).comparative;// Only create connections to other top sentences\nconst connections=rankedIndices.map(targetIndex=>{var _similarityMatrix$ori;return{target:`sentence-${targetIndex}`,weight:((_similarityMatrix$ori=similarityMatrix[originalIndex])===null||_similarityMatrix$ori===void 0?void 0:_similarityMatrix$ori[targetIndex])||0};}).filter(conn=>conn.weight>0.1&&conn.target!==`sentence-${originalIndex}`);return{id:`sentence-${originalIndex}`,text:sentence.slice(0,100)+(sentence.length>100?'...':''),score:scores[originalIndex]||0,sentiment:sentimentScore,connections};});// Simple topic clustering based on word overlap\nconst topicClusters=generateTopicClusters(sentences);return{sentenceGraph,topicClusters};}// Generate topic clusters using simple k-means-like approach\nfunction generateTopicClusters(sentences){const words=sentences.flatMap(s=>s.toLowerCase().match(/\\b\\w{4,}\\b/g)||[]);const wordFreq={};words.forEach(word=>{wordFreq[word]=(wordFreq[word]||0)+1;});// Get top keywords\nconst topWords=Object.entries(wordFreq).sort((_ref,_ref2)=>{let[,a]=_ref;let[,b]=_ref2;return b-a;}).slice(0,12).map(_ref3=>{let[word]=_ref3;return word;});// Create clusters based on keyword presence\nconst clusters=[];const colors=['#3B82F6','#EF4444','#10B981','#F59E0B'];for(let i=0;i<Math.min(3,Math.ceil(topWords.length/4));i++){const clusterKeywords=topWords.slice(i*4,(i+1)*4);const clusterSentences=sentences.filter(sentence=>clusterKeywords.some(keyword=>sentence.toLowerCase().includes(keyword)));if(clusterSentences.length>0){clusters.push({id:`cluster-${i}`,keywords:clusterKeywords,sentences:clusterSentences.map(s=>s.slice(0,80)+'...'),centroid:[Math.random()*100,Math.random()*100],// Simplified\ncolor:colors[i%colors.length]});}}return clusters;}// TextRank implementation\nexport function textRankSummarize(text){let numSentences=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;const startTime=Date.now();const sentences=tokenizeSentences(text);if(sentences.length<=numSentences){const summary=sentences.join('. ')+'.';const qualityMetrics=calculateQualityMetrics(text,summary,sentences,sentences);const visualizationData=generateVisualizationData(sentences,sentences.map(()=>1),[]);return{method:'TextRank',summary,sentences,processingTime:Date.now()-startTime,qualityMetrics,visualizationData};}// Build similarity matrix\nconst similarityMatrix=[];for(let i=0;i<sentences.length;i++){similarityMatrix[i]=[];for(let j=0;j<sentences.length;j++){if(i===j){similarityMatrix[i][j]=0;}else{similarityMatrix[i][j]=cosineSimilarity(sentences[i],sentences[j]);}}}// PageRank algorithm\nconst scores=new Array(sentences.length).fill(1);const damping=0.85;const iterations=50;for(let iter=0;iter<iterations;iter++){const newScores=[...scores];for(let i=0;i<sentences.length;i++){let sum=0;for(let j=0;j<sentences.length;j++){if(i!==j){const totalSim=similarityMatrix[j].reduce((a,b)=>a+b,0);if(totalSim>0){sum+=similarityMatrix[j][i]/totalSim*scores[j];}}}newScores[i]=1-damping+damping*sum;}scores.splice(0,scores.length,...newScores);}// Get top sentences\nconst rankedSentences=sentences.map((sentence,index)=>({sentence,score:scores[index],index})).sort((a,b)=>b.score-a.score).slice(0,numSentences).sort((a,b)=>a.index-b.index);const summary=rankedSentences.map(item=>item.sentence).join('. ')+'.';const selectedSentences=rankedSentences.map(item=>item.sentence);// Calculate quality metrics\nconst qualityMetrics=calculateQualityMetrics(text,summary,selectedSentences,sentences);// Generate visualization data\nconst visualizationData=generateVisualizationData(sentences,scores,similarityMatrix);return{method:'TextRank',summary,sentences:selectedSentences,processingTime:Date.now()-startTime,qualityMetrics,visualizationData};}// LexRank implementation\nexport function lexRankSummarize(text){let numSentences=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;const startTime=Date.now();const sentences=tokenizeSentences(text);if(sentences.length<=numSentences){const summary=sentences.join('. ')+'.';const qualityMetrics=calculateQualityMetrics(text,summary,sentences,sentences);const visualizationData=generateVisualizationData(sentences,sentences.map(()=>1),[]);return{method:'LexRank',summary,sentences,processingTime:Date.now()-startTime,qualityMetrics,visualizationData};}// Build similarity matrix\nconst threshold=0.1;const similarityMatrix=[];for(let i=0;i<sentences.length;i++){similarityMatrix[i]=[];for(let j=0;j<sentences.length;j++){const similarity=cosineSimilarity(sentences[i],sentences[j]);similarityMatrix[i][j]=similarity>threshold?similarity:0;}}// Normalize rows\nfor(let i=0;i<sentences.length;i++){const rowSum=similarityMatrix[i].reduce((a,b)=>a+b,0);if(rowSum>0){for(let j=0;j<sentences.length;j++){similarityMatrix[i][j]/=rowSum;}}}// Power iteration\nconst scores=new Array(sentences.length).fill(1/sentences.length);const iterations=50;for(let iter=0;iter<iterations;iter++){const newScores=new Array(sentences.length).fill(0);for(let i=0;i<sentences.length;i++){for(let j=0;j<sentences.length;j++){newScores[i]+=similarityMatrix[j][i]*scores[j];}}scores.splice(0,scores.length,...newScores);}// Get top sentences\nconst rankedSentences=sentences.map((sentence,index)=>({sentence,score:scores[index],index})).sort((a,b)=>b.score-a.score).slice(0,numSentences).sort((a,b)=>a.index-b.index);const summary=rankedSentences.map(item=>item.sentence).join('. ')+'.';const selectedSentences=rankedSentences.map(item=>item.sentence);// Calculate quality metrics\nconst qualityMetrics=calculateQualityMetrics(text,summary,selectedSentences,sentences);// Generate visualization data\nconst visualizationData=generateVisualizationData(sentences,scores,similarityMatrix);return{method:'LexRank',summary,sentences:selectedSentences,processingTime:Date.now()-startTime,qualityMetrics,visualizationData};}// Simple extractive summarization (frequency-based)\nexport function frequencyBasedSummarize(text){let numSentences=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;const startTime=Date.now();const sentences=tokenizeSentences(text);if(sentences.length<=numSentences){const summary=sentences.join('. ')+'.';const qualityMetrics=calculateQualityMetrics(text,summary,sentences,sentences);const visualizationData=generateVisualizationData(sentences,sentences.map(()=>1),[]);return{method:'Frequency-Based',summary,sentences,processingTime:Date.now()-startTime,qualityMetrics,visualizationData};}// Calculate word frequencies\nconst words=text.toLowerCase().match(/\\b\\w+\\b/g)||[];const wordFreq={};words.forEach(word=>{if(word.length>3){// Ignore short words\nwordFreq[word]=(wordFreq[word]||0)+1;}});// Score sentences based on word frequencies\nconst sentenceScores=sentences.map(sentence=>{const sentenceWords=sentence.toLowerCase().match(/\\b\\w+\\b/g)||[];const score=sentenceWords.reduce((sum,word)=>sum+(wordFreq[word]||0),0);return score/sentenceWords.length;// Normalize by sentence length\n});// Get top sentences\nconst rankedSentences=sentences.map((sentence,index)=>({sentence,score:sentenceScores[index],index})).sort((a,b)=>b.score-a.score).slice(0,numSentences).sort((a,b)=>a.index-b.index);const summary=rankedSentences.map(item=>item.sentence).join('. ')+'.';const selectedSentences=rankedSentences.map(item=>item.sentence);// Calculate quality metrics\nconst qualityMetrics=calculateQualityMetrics(text,summary,selectedSentences,sentences);// Create a simple similarity matrix for visualization (based on word overlap)\nconst similarityMatrix=[];for(let i=0;i<sentences.length;i++){similarityMatrix[i]=[];for(let j=0;j<sentences.length;j++){similarityMatrix[i][j]=i===j?0:cosineSimilarity(sentences[i],sentences[j]);}}// Generate visualization data\nconst visualizationData=generateVisualizationData(sentences,sentenceScores,similarityMatrix);return{method:'Frequency-Based',summary,sentences:selectedSentences,processingTime:Date.now()-startTime,qualityMetrics,visualizationData};}","map":{"version":3,"names":["Sentiment","tokenizeSentences","text","split","map","s","trim","filter","length","cosineSimilarity","sent1","sent2","words1","toLowerCase","words2","allWords","Array","from","Set","vector1","word","w","vector2","dotProduct","reduce","sum","val","i","magnitude1","Math","sqrt","magnitude2","sentiment","calculateQualityMetrics","originalText","summaryText","selectedSentences","allSentences","originalWords","match","summaryWords","coverage","size","coherenceSum","coherence","totalSummaryWords","diversity","confidence","sentimentResult","analyze","round","score","comparative","positive","negative","generateVisualizationData","sentences","scores","similarityMatrix","MAX_NODES","rankedIndices","_","index","sort","a","b","slice","min","item","sentenceGraph","originalIndex","sentence","sentimentScore","connections","targetIndex","_similarityMatrix$ori","target","weight","conn","id","topicClusters","generateTopicClusters","words","flatMap","wordFreq","forEach","topWords","Object","entries","_ref","_ref2","_ref3","clusters","colors","ceil","clusterKeywords","clusterSentences","some","keyword","includes","push","keywords","centroid","random","color","textRankSummarize","numSentences","arguments","undefined","startTime","Date","now","summary","join","qualityMetrics","visualizationData","method","processingTime","j","fill","damping","iterations","iter","newScores","totalSim","splice","rankedSentences","lexRankSummarize","threshold","similarity","rowSum","frequencyBasedSummarize","sentenceScores","sentenceWords"],"sources":["/Users/averyreyna/Codebases/rerank/src/utils/textSummarization.ts"],"sourcesContent":["import Sentiment from 'sentiment';\n\nexport interface QualityMetrics {\n  coverage: number;\n  coherence: number;\n  diversity: number;\n  confidence: number;\n  sentiment: {\n    score: number;\n    comparative: number;\n    positive: string[];\n    negative: string[];\n  };\n}\n\nexport interface SentenceNode {\n  id: string;\n  text: string;\n  score: number;\n  sentiment: number;\n  connections: { target: string; weight: number }[];\n  position?: { x: number; y: number };\n}\n\nexport interface TopicCluster {\n  id: string;\n  keywords: string[];\n  sentences: string[];\n  centroid: number[];\n  color: string;\n}\n\nexport interface SummaryResult {\n  method: string;\n  summary: string;\n  sentences: string[];\n  processingTime: number;\n  qualityMetrics: QualityMetrics;\n  visualizationData: {\n    sentenceGraph: SentenceNode[];\n    topicClusters: TopicCluster[];\n  };\n}\n\n// Simple sentence tokenizer\nfunction tokenizeSentences(text: string): string[] {\n  return text\n    .split(/[.!?]+/)\n    .map(s => s.trim())\n    .filter(s => s.length > 10);\n}\n\n// Calculate cosine similarity between two sentences\nfunction cosineSimilarity(sent1: string, sent2: string): number {\n  const words1 = sent1.toLowerCase().split(/\\s+/);\n  const words2 = sent2.toLowerCase().split(/\\s+/);\n  \n  const allWords = Array.from(new Set([...words1, ...words2]));\n  \n  const vector1 = allWords.map(word => words1.filter(w => w === word).length);\n  const vector2 = allWords.map(word => words2.filter(w => w === word).length);\n  \n  const dotProduct = vector1.reduce((sum, val, i) => sum + val * vector2[i], 0);\n  const magnitude1 = Math.sqrt(vector1.reduce((sum, val) => sum + val * val, 0));\n  const magnitude2 = Math.sqrt(vector2.reduce((sum, val) => sum + val * val, 0));\n  \n  return magnitude1 && magnitude2 ? dotProduct / (magnitude1 * magnitude2) : 0;\n}\n\n// Initialize sentiment analyzer\nconst sentiment = new Sentiment();\n\n// Calculate quality metrics for a summary\nfunction calculateQualityMetrics(\n  originalText: string, \n  summaryText: string, \n  selectedSentences: string[],\n  allSentences: string[]\n): QualityMetrics {\n  // Coverage: ratio of unique words in summary vs original\n  const originalWords = new Set(originalText.toLowerCase().match(/\\b\\w+\\b/g) || []);\n  const summaryWords = new Set(summaryText.toLowerCase().match(/\\b\\w+\\b/g) || []);\n  const coverage = summaryWords.size / originalWords.size;\n\n  // Coherence: average similarity between consecutive sentences in summary\n  let coherenceSum = 0;\n  for (let i = 0; i < selectedSentences.length - 1; i++) {\n    coherenceSum += cosineSimilarity(selectedSentences[i], selectedSentences[i + 1]);\n  }\n  const coherence = selectedSentences.length > 1 ? coherenceSum / (selectedSentences.length - 1) : 1;\n\n  // Diversity: ratio of unique words to total words in summary\n  const totalSummaryWords = summaryText.toLowerCase().match(/\\b\\w+\\b/g) || [];\n  const diversity = summaryWords.size / totalSummaryWords.length;\n\n  // Confidence: weighted combination of metrics\n  const confidence = (coverage * 0.4 + coherence * 0.3 + diversity * 0.3);\n\n  // Sentiment analysis\n  const sentimentResult = sentiment.analyze(summaryText);\n\n  return {\n    coverage: Math.round(coverage * 100) / 100,\n    coherence: Math.round(coherence * 100) / 100,\n    diversity: Math.round(diversity * 100) / 100,\n    confidence: Math.round(confidence * 100) / 100,\n    sentiment: {\n      score: sentimentResult.score,\n      comparative: Math.round(sentimentResult.comparative * 100) / 100,\n      positive: sentimentResult.positive,\n      negative: sentimentResult.negative\n    }\n  };\n}\n\n// Generate visualization data\nfunction generateVisualizationData(\n  sentences: string[], \n  scores: number[], \n  similarityMatrix: number[][]\n): { sentenceGraph: SentenceNode[]; topicClusters: TopicCluster[] } {\n  // Limit visualization to top 25 sentences to improve performance\n  const MAX_NODES = 25;\n  \n  // Get indices of top scoring sentences\n  const rankedIndices = sentences\n    .map((_, index) => ({ index, score: scores[index] || 0 }))\n    .sort((a, b) => b.score - a.score)\n    .slice(0, Math.min(MAX_NODES, sentences.length))\n    .map(item => item.index);\n\n  // Create sentence nodes for graph visualization (only for top sentences)\n  const sentenceGraph: SentenceNode[] = rankedIndices.map((originalIndex) => {\n    const sentence = sentences[originalIndex];\n    const sentimentScore = sentiment.analyze(sentence).comparative;\n    \n    // Only create connections to other top sentences\n    const connections = rankedIndices.map((targetIndex) => ({\n      target: `sentence-${targetIndex}`,\n      weight: similarityMatrix[originalIndex]?.[targetIndex] || 0\n    })).filter(conn => conn.weight > 0.1 && conn.target !== `sentence-${originalIndex}`);\n\n    return {\n      id: `sentence-${originalIndex}`,\n      text: sentence.slice(0, 100) + (sentence.length > 100 ? '...' : ''),\n      score: scores[originalIndex] || 0,\n      sentiment: sentimentScore,\n      connections\n    };\n  });\n\n  // Simple topic clustering based on word overlap\n  const topicClusters = generateTopicClusters(sentences);\n\n  return { sentenceGraph, topicClusters };\n}\n\n// Generate topic clusters using simple k-means-like approach\nfunction generateTopicClusters(sentences: string[]): TopicCluster[] {\n  const words = sentences.flatMap(s => \n    s.toLowerCase().match(/\\b\\w{4,}\\b/g) || []\n  );\n  \n  const wordFreq: { [key: string]: number } = {};\n  words.forEach(word => {\n    wordFreq[word] = (wordFreq[word] || 0) + 1;\n  });\n\n  // Get top keywords\n  const topWords = Object.entries(wordFreq)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 12)\n    .map(([word]) => word);\n\n  // Create clusters based on keyword presence\n  const clusters: TopicCluster[] = [];\n  const colors = ['#3B82F6', '#EF4444', '#10B981', '#F59E0B'];\n  \n  for (let i = 0; i < Math.min(3, Math.ceil(topWords.length / 4)); i++) {\n    const clusterKeywords = topWords.slice(i * 4, (i + 1) * 4);\n    const clusterSentences = sentences.filter(sentence => \n      clusterKeywords.some(keyword => \n        sentence.toLowerCase().includes(keyword)\n      )\n    );\n\n    if (clusterSentences.length > 0) {\n      clusters.push({\n        id: `cluster-${i}`,\n        keywords: clusterKeywords,\n        sentences: clusterSentences.map(s => s.slice(0, 80) + '...'),\n        centroid: [Math.random() * 100, Math.random() * 100], // Simplified\n        color: colors[i % colors.length]\n      });\n    }\n  }\n\n  return clusters;\n}\n\n// TextRank implementation\nexport function textRankSummarize(text: string, numSentences: number = 3): SummaryResult {\n  const startTime = Date.now();\n  const sentences = tokenizeSentences(text);\n  \n  if (sentences.length <= numSentences) {\n    const summary = sentences.join('. ') + '.';\n    const qualityMetrics = calculateQualityMetrics(text, summary, sentences, sentences);\n    const visualizationData = generateVisualizationData(sentences, sentences.map(() => 1), []);\n    \n    return {\n      method: 'TextRank',\n      summary,\n      sentences,\n      processingTime: Date.now() - startTime,\n      qualityMetrics,\n      visualizationData\n    };\n  }\n  \n  // Build similarity matrix\n  const similarityMatrix: number[][] = [];\n  for (let i = 0; i < sentences.length; i++) {\n    similarityMatrix[i] = [];\n    for (let j = 0; j < sentences.length; j++) {\n      if (i === j) {\n        similarityMatrix[i][j] = 0;\n      } else {\n        similarityMatrix[i][j] = cosineSimilarity(sentences[i], sentences[j]);\n      }\n    }\n  }\n  \n  // PageRank algorithm\n  const scores = new Array(sentences.length).fill(1);\n  const damping = 0.85;\n  const iterations = 50;\n  \n  for (let iter = 0; iter < iterations; iter++) {\n    const newScores = [...scores];\n    for (let i = 0; i < sentences.length; i++) {\n      let sum = 0;\n      for (let j = 0; j < sentences.length; j++) {\n        if (i !== j) {\n          const totalSim = similarityMatrix[j].reduce((a, b) => a + b, 0);\n          if (totalSim > 0) {\n            sum += (similarityMatrix[j][i] / totalSim) * scores[j];\n          }\n        }\n      }\n      newScores[i] = (1 - damping) + damping * sum;\n    }\n    scores.splice(0, scores.length, ...newScores);\n  }\n  \n  // Get top sentences\n  const rankedSentences = sentences\n    .map((sentence, index) => ({ sentence, score: scores[index], index }))\n    .sort((a, b) => b.score - a.score)\n    .slice(0, numSentences)\n    .sort((a, b) => a.index - b.index);\n  \n  const summary = rankedSentences.map(item => item.sentence).join('. ') + '.';\n  const selectedSentences = rankedSentences.map(item => item.sentence);\n  \n  // Calculate quality metrics\n  const qualityMetrics = calculateQualityMetrics(text, summary, selectedSentences, sentences);\n  \n  // Generate visualization data\n  const visualizationData = generateVisualizationData(sentences, scores, similarityMatrix);\n  \n  return {\n    method: 'TextRank',\n    summary,\n    sentences: selectedSentences,\n    processingTime: Date.now() - startTime,\n    qualityMetrics,\n    visualizationData\n  };\n}\n\n// LexRank implementation\nexport function lexRankSummarize(text: string, numSentences: number = 3): SummaryResult {\n  const startTime = Date.now();\n  const sentences = tokenizeSentences(text);\n  \n  if (sentences.length <= numSentences) {\n    const summary = sentences.join('. ') + '.';\n    const qualityMetrics = calculateQualityMetrics(text, summary, sentences, sentences);\n    const visualizationData = generateVisualizationData(sentences, sentences.map(() => 1), []);\n    \n    return {\n      method: 'LexRank',\n      summary,\n      sentences,\n      processingTime: Date.now() - startTime,\n      qualityMetrics,\n      visualizationData\n    };\n  }\n  \n  // Build similarity matrix\n  const threshold = 0.1;\n  const similarityMatrix: number[][] = [];\n  \n  for (let i = 0; i < sentences.length; i++) {\n    similarityMatrix[i] = [];\n    for (let j = 0; j < sentences.length; j++) {\n      const similarity = cosineSimilarity(sentences[i], sentences[j]);\n      similarityMatrix[i][j] = similarity > threshold ? similarity : 0;\n    }\n  }\n  \n  // Normalize rows\n  for (let i = 0; i < sentences.length; i++) {\n    const rowSum = similarityMatrix[i].reduce((a, b) => a + b, 0);\n    if (rowSum > 0) {\n      for (let j = 0; j < sentences.length; j++) {\n        similarityMatrix[i][j] /= rowSum;\n      }\n    }\n  }\n  \n  // Power iteration\n  const scores = new Array(sentences.length).fill(1 / sentences.length);\n  const iterations = 50;\n  \n  for (let iter = 0; iter < iterations; iter++) {\n    const newScores = new Array(sentences.length).fill(0);\n    for (let i = 0; i < sentences.length; i++) {\n      for (let j = 0; j < sentences.length; j++) {\n        newScores[i] += similarityMatrix[j][i] * scores[j];\n      }\n    }\n    scores.splice(0, scores.length, ...newScores);\n  }\n  \n  // Get top sentences\n  const rankedSentences = sentences\n    .map((sentence, index) => ({ sentence, score: scores[index], index }))\n    .sort((a, b) => b.score - a.score)\n    .slice(0, numSentences)\n    .sort((a, b) => a.index - b.index);\n  \n  const summary = rankedSentences.map(item => item.sentence).join('. ') + '.';\n  const selectedSentences = rankedSentences.map(item => item.sentence);\n  \n  // Calculate quality metrics\n  const qualityMetrics = calculateQualityMetrics(text, summary, selectedSentences, sentences);\n  \n  // Generate visualization data\n  const visualizationData = generateVisualizationData(sentences, scores, similarityMatrix);\n  \n  return {\n    method: 'LexRank',\n    summary,\n    sentences: selectedSentences,\n    processingTime: Date.now() - startTime,\n    qualityMetrics,\n    visualizationData\n  };\n}\n\n// Simple extractive summarization (frequency-based)\nexport function frequencyBasedSummarize(text: string, numSentences: number = 3): SummaryResult {\n  const startTime = Date.now();\n  const sentences = tokenizeSentences(text);\n  \n  if (sentences.length <= numSentences) {\n    const summary = sentences.join('. ') + '.';\n    const qualityMetrics = calculateQualityMetrics(text, summary, sentences, sentences);\n    const visualizationData = generateVisualizationData(sentences, sentences.map(() => 1), []);\n    \n    return {\n      method: 'Frequency-Based',\n      summary,\n      sentences,\n      processingTime: Date.now() - startTime,\n      qualityMetrics,\n      visualizationData\n    };\n  }\n  \n  // Calculate word frequencies\n  const words = text.toLowerCase().match(/\\b\\w+\\b/g) || [];\n  const wordFreq: { [key: string]: number } = {};\n  \n  words.forEach((word: string) => {\n    if (word.length > 3) { // Ignore short words\n      wordFreq[word] = (wordFreq[word] || 0) + 1;\n    }\n  });\n  \n  // Score sentences based on word frequencies\n  const sentenceScores: number[] = sentences.map((sentence: string) => {\n    const sentenceWords: string[] = sentence.toLowerCase().match(/\\b\\w+\\b/g) || [];\n    const score: number = sentenceWords.reduce((sum: number, word: string) => sum + (wordFreq[word] || 0), 0);\n    return score / sentenceWords.length; // Normalize by sentence length\n  });\n  \n  // Get top sentences\n  const rankedSentences = sentences\n    .map((sentence, index) => ({ sentence, score: sentenceScores[index], index }))\n    .sort((a, b) => b.score - a.score)\n    .slice(0, numSentences)\n    .sort((a, b) => a.index - b.index);\n  \n  const summary = rankedSentences.map(item => item.sentence).join('. ') + '.';\n  const selectedSentences = rankedSentences.map(item => item.sentence);\n  \n  // Calculate quality metrics\n  const qualityMetrics = calculateQualityMetrics(text, summary, selectedSentences, sentences);\n  \n  // Create a simple similarity matrix for visualization (based on word overlap)\n  const similarityMatrix: number[][] = [];\n  for (let i = 0; i < sentences.length; i++) {\n    similarityMatrix[i] = [];\n    for (let j = 0; j < sentences.length; j++) {\n      similarityMatrix[i][j] = i === j ? 0 : cosineSimilarity(sentences[i], sentences[j]);\n    }\n  }\n  \n  // Generate visualization data\n  const visualizationData = generateVisualizationData(sentences, sentenceScores, similarityMatrix);\n  \n  return {\n    method: 'Frequency-Based',\n    summary,\n    sentences: selectedSentences,\n    processingTime: Date.now() - startTime,\n    qualityMetrics,\n    visualizationData\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}